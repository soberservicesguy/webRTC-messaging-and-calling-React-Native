1 setSelfUserDetails (triggered automatically in first screen) => To be used when user signs up, store the response of rest call
2 goOnline (triggered automatically) => makes rest call and gets rooms and if new room is obtained, socket is created for it as well through 'new_entry_in_socket' event
	3 joinRoom => To be used to join a room and create a socket from it
	3 assign_socket_events => To be used when some socket is to be assigned events to listen on
sendToPeer => To be used when you want to send something to someone through socket.io
whoisOnline => To be used when you want people to know who are online through socket.io
createPeerConnection => To be used when webRTC connection is need to be created
	getLocalStream => To be used when local video + audio stream is needed while creating webRTC connection
	getLocalVoiceStream => To be used when local audio stream is needed while creating webRTC connection
	switchVideo => To be used during conference calling to see some other video of peer
	stopTracks => To be used during conference calling to stop all remote streams
	makePhoneCall => Creates webRTC connection with person and sends offer for voice call
	makeVideoCall => Creates webRTC connection with person and sends offer for video call
	sendMessage => used to send message to someone through socket.io
	messageToRelevantChatNodeOnIndividualScreen => this returns last 20 messages on current chat screen
		PROBLEM, also noscrolltobottom() used
	messageCountAndLastMessageToRelevantChatNode => this return message count which have "new" property in them, and last message 




goOffline => PROBLEM!!! 
addSomeoneToRoom => PROBLEM!!!
leaveRoom => PROBLEM!!!
removeFromRoom
blockUser



user_details.user_phone_number

'stored_messages'
	item.room_string
	item.message_state === 'new'
	new_message.room_string

'chatnodes'
	chat_node.room_string
	let chatnode_with_timestamp = {...new_chatnode, timestamp: unix_time, count:count, last_message:last_message}


FLOW:
	USER SIGN UP
	User adds some contact
	User finds contact and selects it
	Contact is converted into chat node
	send message to chat node and room and socket is created,
	other persons rooms are updated and if he is online he joins the room and gets message